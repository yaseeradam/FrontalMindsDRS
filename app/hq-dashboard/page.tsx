"use client";

import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useRoleProtection } from "@/hooks/useRoleProtection";
import { readStore, type CaseRecord, type ArrestRecord, type PatrolRecord, type TransferRecord, type EvidenceRecord } from "@/lib/storage";
import { getActivityLogs, type ActivityLog } from "@/lib/activity-log";
import { ensureSeed } from "@/lib/seed";
import {
	Building2,
	Users,
	FolderKanban,
	Activity,
	Search,
	Filter,
	Download,
	RefreshCcw,
	MapPin,
	Bell,
	Clock,
	TrendingUp,
	AlertTriangle,
	CheckCircle,
	XCircle,
	BarChart3
} from "lucide-react";

// Mock branch data - in production this would come from API
const mockBranches = [
	{ id: "lagos-central", name: "Lagos Central", activeCases: 12, officersOnline: 8, lastSync: "2 min ago" },
	{ id: "abuja-north", name: "Abuja North", activeCases: 8, officersOnline: 6, lastSync: "5 min ago" },
	{ id: "kano-east", name: "Kano East", activeCases: 15, officersOnline: 10, lastSync: "1 min ago" },
	{ id: "port-harcourt", name: "Port Harcourt", activeCases: 6, officersOnline: 4, lastSync: "8 min ago" },
	{ id: "ibadan-south", name: "Ibadan South", activeCases: 9, officersOnline: 7, lastSync: "3 min ago" }
];

export default function HQDashboardPage() {
	const { user, hasAccess } = useRoleProtection(['Admin']); // Only HQ Admin can access
	const [branches, setBranches] = useState(mockBranches);
	const [selectedBranch, setSelectedBranch] = useState<string>("all");
	const [searchTerm, setSearchTerm] = useState("");
	const [activityLogs, setActivityLogs] = useState<ActivityLog[]>([]);
	const [stats, setStats] = useState({
		totalCases: 0,
		totalArrests: 0,
		totalPatrols: 0,
		activeCases: 0,
		officersOnline: 0,
		newEvidence: 0,
		alerts: 0
	});
	const [generatingReport, setGeneratingReport] = useState<string | null>(null);

	useEffect(() => {
		if (!hasAccess) return;

		// Load data
		ensureSeed();
		loadDashboardData();
		loadActivityLogs();
	}, [hasAccess]);

	const loadDashboardData = () => {
		const cases = readStore("cases", [] as CaseRecord[]);
		const arrests = readStore("arrests", [] as ArrestRecord[]);
		const patrols = readStore("patrols", [] as PatrolRecord[]);
		const evidence = readStore("evidence", [] as EvidenceRecord[]);

		// Calculate stats
		const activeCases = cases.filter(c => c.status === "Open").length;
		const newEvidence = evidence.filter(e => {
			const evidenceDate = new Date(); // In real app, would have createdAt field
			const sevenDaysAgo = new Date();
			sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
			return evidenceDate > sevenDaysAgo;
		}).length;

		setStats({
			totalCases: cases.length,
			totalArrests: arrests.length,
			totalPatrols: patrols.length,
			activeCases,
			officersOnline: branches.reduce((sum, b) => sum + b.officersOnline, 0),
			newEvidence,
			alerts: Math.floor(Math.random() * 5) // Mock alerts
		});
	};

	const loadActivityLogs = () => {
		const logs = getActivityLogs({ limit: 50 });
		setActivityLogs(logs);
	};

	const handleRefresh = () => {
		loadDashboardData();
		loadActivityLogs();
	};

	const generateReport = async (reportType: string) => {
		setGeneratingReport(reportType);
		try {
			// Simulate report generation
			await new Promise(resolve => setTimeout(resolve, 2000));

			// Create mock report data
			const reportData = {
				type: reportType,
				generatedAt: new Date().toISOString(),
				generatedBy: user?.name || "HQ Admin",
				period: "Last 30 days",
				summary: stats,
				branches: mockBranches,
				activityLogs: activityLogs.slice(0, 10)
			};

			// Create and download CSV
			const csvContent = [
				["Report Type", reportType.toUpperCase()],
				["Generated At", new Date().toLocaleString()],
				["Generated By", reportData.generatedBy],
				["Period", reportData.period],
				[""],
				["Summary Statistics", ""],
				["Total Cases", stats.totalCases.toString()],
				["Active Cases", stats.activeCases.toString()],
				["Total Arrests", stats.totalArrests.toString()],
				["Officers Online", stats.officersOnline.toString()],
				[""],
				["Branch Data", ""],
				["Branch", "Active Cases", "Officers Online", "Last Sync"],
				...mockBranches.map(b => [b.name, b.activeCases.toString(), b.officersOnline.toString(), b.lastSync])
			].map(row => row.join(",")).join("\n");

			const blob = new Blob([csvContent], { type: "text/csv" });
			const url = URL.createObjectURL(blob);
			const a = document.createElement("a");
			a.href = url;
			a.download = `${reportType}-report-${new Date().toISOString().split("T")[0]}.csv`;
			document.body.appendChild(a);
			a.click();
			document.body.removeChild(a);
			URL.revokeObjectURL(url);

		} catch (error) {
			console.error("Report generation failed:", error);
		} finally {
			setGeneratingReport(null);
		}
	};

	const filteredBranches = branches.filter(branch =>
		selectedBranch === "all" || branch.id === selectedBranch
	);

	const filteredLogs = activityLogs.filter(log =>
		searchTerm === "" ||
		log.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
		log.user.toLowerCase().includes(searchTerm.toLowerCase())
	);

	// Show loading screen while checking authentication
	if (!hasAccess) {
		return (
			<div className="min-h-screen flex items-center justify-center bg-background">
				<div className="flex items-center gap-3 text-muted-foreground">
					<div className="w-6 h-6 border-2 border-primary border-t-transparent rounded-full animate-spin"></div>
					<span className="font-mono text-sm">ACCESS DENIED - HQ ADMIN REQUIRED</span>
				</div>
			</div>
		);
	}

	return (
		<div className="min-h-screen bg-slate-50">
			{/* Header with Police Background */}
			<div className="bg-gradient-to-br from-slate-900 via-blue-900 to-slate-800 pb-8">
				<div className="p-6">
					{/* Header */}
					<div className="bg-gradient-to-r from-blue-900 to-slate-800 border border-blue-700 rounded-xl p-6 shadow-2xl">
						<div className="flex items-center justify-between">
							<div className="flex items-center gap-4">
								<div className="w-16 h-16 bg-gradient-to-br from-yellow-400 to-yellow-600 rounded-full flex items-center justify-center shadow-lg">
									<Building2 className="h-8 w-8 text-slate-900" />
								</div>
								<div>
									<h1 className="text-4xl font-bold tracking-wider text-white font-mono drop-shadow-lg">
										HQ COMMAND CENTER
									</h1>
									<p className="text-sm text-blue-200 font-mono mt-1 tracking-wide">
										NIGERIAN POLICE FORCE - CENTRAL OPERATIONS DIVISION
									</p>
									<div className="flex items-center gap-2 mt-2">
										<div className="h-2 w-2 bg-green-400 rounded-full animate-pulse"></div>
										<span className="text-xs text-green-400 font-mono">SYSTEM ACTIVE</span>
									</div>
								</div>
							</div>
							<div className="flex items-center gap-4">
								<Button onClick={handleRefresh} className="bg-blue-600 hover:bg-blue-700 text-white border-blue-500 font-mono shadow-lg">
									<RefreshCcw className="h-4 w-4 mr-2" />
									REFRESH DATA
								</Button>
								<div className="text-right">
									<div className="text-xs text-blue-200 font-mono">LAST UPDATE</div>
									<div className="text-sm text-white font-mono font-bold">
										{new Date().toLocaleTimeString()}
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>

			{/* Main Content */}
			<div className="space-y-8 p-6 -mt-4">
				{/* Real-Time Metrics Panel */}
			<div className="grid grid-cols-2 md:grid-cols-4 gap-6">
				<Card className="bg-gradient-to-br from-slate-800 to-slate-900 border border-blue-700 shadow-2xl">
					<CardContent className="p-6">
						<div className="flex items-center justify-between">
							<div>
								<div className="text-xs font-mono text-blue-300 tracking-wider uppercase">TOTAL CASES</div>
								<div className="text-3xl font-bold font-mono mt-2 text-white">{stats.totalCases.toString().padStart(3, '0')}</div>
								<div className="text-xs text-blue-400 font-mono mt-1">ALL BRANCHES</div>
							</div>
							<div className="w-12 h-12 bg-gradient-to-br from-blue-600 to-blue-800 rounded-lg flex items-center justify-center shadow-lg">
								<FolderKanban className="h-6 w-6 text-white" />
							</div>
						</div>
					</CardContent>
				</Card>

				<Card className="bg-gradient-to-br from-slate-800 to-slate-900 border border-green-700 shadow-2xl">
					<CardContent className="p-6">
						<div className="flex items-center justify-between">
							<div>
								<div className="text-xs font-mono text-green-300 tracking-wider uppercase">ACTIVE CASES</div>
								<div className="text-3xl font-bold font-mono mt-2 text-white">{stats.activeCases.toString().padStart(3, '0')}</div>
								<div className="text-xs text-green-400 font-mono mt-1">REQUIRES ATTENTION</div>
							</div>
							<div className="w-12 h-12 bg-gradient-to-br from-green-600 to-green-800 rounded-lg flex items-center justify-center shadow-lg">
								<Activity className="h-6 w-6 text-white" />
							</div>
						</div>
					</CardContent>
				</Card>

				<Card className="bg-gradient-to-br from-slate-800 to-slate-900 border border-purple-700 shadow-2xl">
					<CardContent className="p-6">
						<div className="flex items-center justify-between">
							<div>
								<div className="text-xs font-mono text-purple-300 tracking-wider uppercase">OFFICERS ONLINE</div>
								<div className="text-3xl font-bold font-mono mt-2 text-white">{stats.officersOnline.toString().padStart(2, '0')}</div>
								<div className="text-xs text-purple-400 font-mono mt-1">FIELD PERSONNEL</div>
							</div>
							<div className="w-12 h-12 bg-gradient-to-br from-purple-600 to-purple-800 rounded-lg flex items-center justify-center shadow-lg">
								<Users className="h-6 w-6 text-white" />
							</div>
						</div>
					</CardContent>
				</Card>

				<Card className="bg-gradient-to-br from-slate-800 to-slate-900 border border-orange-700 shadow-2xl">
					<CardContent className="p-6">
						<div className="flex items-center justify-between">
							<div>
								<div className="text-xs font-mono text-orange-300 tracking-wider uppercase">NEW EVIDENCE</div>
								<div className="text-3xl font-bold font-mono mt-2 text-white">{stats.newEvidence.toString().padStart(2, '0')}</div>
								<div className="text-xs text-orange-400 font-mono mt-1">LAST 7 DAYS</div>
							</div>
							<div className="w-12 h-12 bg-gradient-to-br from-orange-600 to-orange-800 rounded-lg flex items-center justify-center shadow-lg">
								<TrendingUp className="h-6 w-6 text-white" />
							</div>
						</div>
					</CardContent>
				</Card>
			</div>

			{/* Main Content Tabs */}
			<Tabs defaultValue="branches" className="space-y-6">
				<TabsList className="grid w-full grid-cols-4 bg-slate-800 border border-blue-700">
					<TabsTrigger value="branches" className="font-mono text-white data-[state=active]:bg-blue-600 data-[state=active]:text-white">BRANCHES</TabsTrigger>
					<TabsTrigger value="cases" className="font-mono text-white data-[state=active]:bg-blue-600 data-[state=active]:text-white">CASE BOARDS</TabsTrigger>
					<TabsTrigger value="timeline" className="font-mono text-white data-[state=active]:bg-blue-600 data-[state=active]:text-white">TIMELINE</TabsTrigger>
					<TabsTrigger value="reports" className="font-mono text-white data-[state=active]:bg-blue-600 data-[state=active]:text-white">REPORTS</TabsTrigger>
				</TabsList>

				{/* Branches Tab */}
				<TabsContent value="branches" className="space-y-6">
					{/* Branch Filter */}
					<div className="bg-card border border-border rounded-xl p-4">
						<div className="flex items-center gap-4">
							<div className="flex items-center gap-2">
								<Filter className="h-4 w-4 text-muted-foreground" />
								<Select value={selectedBranch} onValueChange={setSelectedBranch}>
									<SelectTrigger className="w-48 font-mono">
										<SelectValue placeholder="Select Branch" />
									</SelectTrigger>
									<SelectContent>
										<SelectItem value="all">All Branches</SelectItem>
										{mockBranches.map(branch => (
											<SelectItem key={branch.id} value={branch.id}>{branch.name}</SelectItem>
										))}
									</SelectContent>
								</Select>
							</div>
						</div>
					</div>

					{/* Branch Overview */}
					<div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
						{filteredBranches.map(branch => (
							<Card key={branch.id} className="bg-gradient-to-br from-slate-800 to-slate-900 border border-blue-700 hover:border-blue-500 shadow-2xl hover:shadow-blue-500/20 transition-all duration-300 cursor-pointer hover:scale-105">
								<CardHeader className="pb-4 border-b border-blue-700">
									<div className="flex items-center justify-between">
										<CardTitle className="text-xl font-mono text-white font-bold">{branch.name}</CardTitle>
										<div className="w-10 h-10 bg-gradient-to-br from-blue-600 to-blue-800 rounded-lg flex items-center justify-center shadow-lg">
											<Building2 className="h-5 w-5 text-white" />
										</div>
									</div>
									<div className="flex items-center gap-2 mt-2">
										<div className={`h-2 w-2 rounded-full ${branch.lastSync.includes('1') || branch.lastSync.includes('2') ? 'bg-green-400' : 'bg-yellow-400'} animate-pulse`}></div>
										<span className="text-xs text-blue-300 font-mono uppercase tracking-wide">ACTIVE STATION</span>
									</div>
								</CardHeader>
								<CardContent className="space-y-6 pt-4">
									<div className="grid grid-cols-2 gap-6">
										<div className="text-center">
											<div className="text-xs text-blue-300 font-mono uppercase tracking-wider mb-2">ACTIVE CASES</div>
											<div className="text-3xl font-bold font-mono text-white">{branch.activeCases.toString().padStart(2, '0')}</div>
											<div className="text-xs text-blue-400 font-mono mt-1">REQUIRES ATTENTION</div>
										</div>
										<div className="text-center">
											<div className="text-xs text-green-300 font-mono uppercase tracking-wider mb-2">OFFICERS ONLINE</div>
											<div className="text-3xl font-bold font-mono text-white">{branch.officersOnline.toString().padStart(2, '0')}</div>
											<div className="text-xs text-green-400 font-mono mt-1">FIELD PERSONNEL</div>
										</div>
									</div>
									<div className="flex items-center justify-between pt-4 border-t border-blue-700">
										<div className="text-xs text-blue-200 font-mono">
											<span className="uppercase tracking-wide">Last Sync:</span> {branch.lastSync}
										</div>
										<Button size="sm" className="bg-blue-600 hover:bg-blue-700 hover:bg-blue-800 text-white border-blue-500 font-mono text-xs shadow-lg cursor-pointer hover:shadow-xl transition-all duration-200">
											VIEW DETAILS
										</Button>
									</div>
								</CardContent>
							</Card>
						))}
					</div>
				</TabsContent>

				{/* Case Boards Tab */}
				<TabsContent value="cases" className="space-y-6">
					{/* Extended Blue Background Section */}
					<div className="bg-gradient-to-br from-slate-900 via-blue-900 to-slate-800 pb-8">
						<div className="p-6">
							{/* Case Boards Filter with HQ Styling */}
							<div className="bg-gradient-to-r from-blue-900 to-slate-800 border border-blue-700 rounded-xl p-6 shadow-2xl">
								<div className="flex items-center justify-between mb-4">
									<div className="flex items-center gap-4">
										<div className="w-12 h-12 bg-gradient-to-br from-yellow-400 to-yellow-600 rounded-full flex items-center justify-center shadow-lg">
											<Search className="h-6 w-6 text-slate-900" />
										</div>
										<div>
											<h3 className="text-xl font-bold tracking-wider text-white font-mono drop-shadow-lg">
												CASE BOARD SEARCH
											</h3>
											<p className="text-sm text-blue-200 font-mono mt-1 tracking-wide">
												INVESTIGATION MANAGEMENT SYSTEM
											</p>
										</div>
									</div>
									<div className="flex items-center gap-2">
										<div className="h-2 w-2 bg-green-400 rounded-full animate-pulse"></div>
										<span className="text-xs text-green-400 font-mono">SEARCH ACTIVE</span>
									</div>
								</div>
								<div className="flex items-center gap-4">
									<div className="flex items-center gap-2 flex-1">
										<Input
											placeholder="Search case boards..."
											value={searchTerm}
											onChange={(e) => setSearchTerm(e.target.value)}
											className="font-mono bg-slate-800 border-blue-600 text-white placeholder:text-blue-300"
										/>
									</div>
									<Select value={selectedBranch} onValueChange={setSelectedBranch}>
										<SelectTrigger className="w-48 font-mono bg-slate-800 border-blue-600 text-white">
											<SelectValue placeholder="Filter by Branch" />
										</SelectTrigger>
										<SelectContent>
											<SelectItem value="all">All Branches</SelectItem>
											{mockBranches.map(branch => (
												<SelectItem key={branch.id} value={branch.id}>{branch.name}</SelectItem>
											))}
										</SelectContent>
									</Select>
								</div>
							</div>
						</div>
					</div>

					{/* Case Boards Grid */}
					<div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
						{/* Mock case boards - in production, load from investigation_boards */}
						{[
							{ id: "board-1", caseId: "CASE-2025-001", title: "Burglary Investigation", branch: "Lagos Central", lastModified: "2 hours ago", pins: 12, connections: 8 },
							{ id: "board-2", caseId: "CASE-2025-002", title: "Theft Network", branch: "Abuja North", lastModified: "1 day ago", pins: 15, connections: 12 },
							{ id: "board-3", caseId: "CASE-2025-003", title: "Assault Case", branch: "Kano East", lastModified: "3 hours ago", pins: 8, connections: 5 },
							{ id: "board-4", caseId: "CASE-2025-004", title: "Fraud Investigation", branch: "Port Harcourt", lastModified: "6 hours ago", pins: 20, connections: 18 },
							{ id: "board-5", caseId: "CASE-2025-005", title: "Drug Trafficking", branch: "Ibadan South", lastModified: "12 hours ago", pins: 25, connections: 22 },
							{ id: "board-6", caseId: "CASE-2025-006", title: "Cyber Crime", branch: "Lagos Central", lastModified: "4 hours ago", pins: 10, connections: 7 }
						].filter(board =>
							(selectedBranch === "all" || board.branch === mockBranches.find(b => b.id === selectedBranch)?.name) &&
							(searchTerm === "" || board.title.toLowerCase().includes(searchTerm.toLowerCase()) || board.caseId.toLowerCase().includes(searchTerm.toLowerCase()))
						).map(board => (
							<Card key={board.id} className="bg-gradient-to-br from-slate-800 to-slate-900 border border-blue-700 hover:border-blue-500 shadow-2xl hover:shadow-blue-500/20 transition-all duration-300 cursor-pointer hover:scale-105">
								<CardHeader className="pb-4 border-b border-blue-700">
									<div className="flex items-center justify-between">
										<CardTitle className="text-lg font-mono text-white font-bold">{board.caseId}</CardTitle>
										<div className="w-10 h-10 bg-gradient-to-br from-blue-600 to-blue-800 rounded-lg flex items-center justify-center shadow-lg">
											<FolderKanban className="h-5 w-5 text-white" />
										</div>
									</div>
									<div className="flex items-center gap-2 mt-2">
										<div className="h-2 w-2 rounded-full bg-green-400 animate-pulse"></div>
										<span className="text-xs text-blue-300 font-mono uppercase tracking-wide">ACTIVE INVESTIGATION</span>
									</div>
									<h3 className="font-semibold font-mono text-base text-white mt-2">{board.title}</h3>
								</CardHeader>
								<CardContent className="space-y-6 pt-4">
									<div className="grid grid-cols-2 gap-6">
										<div className="text-center">
											<div className="text-xs text-blue-300 font-mono uppercase tracking-wider mb-2">INVESTIGATION PINS</div>
											<div className="text-3xl font-bold font-mono text-white">{board.pins.toString().padStart(2, '0')}</div>
											<div className="text-xs text-blue-400 font-mono mt-1">EVIDENCE POINTS</div>
										</div>
										<div className="text-center">
											<div className="text-xs text-green-300 font-mono uppercase tracking-wider mb-2">CONNECTIONS</div>
											<div className="text-3xl font-bold font-mono text-white">{board.connections.toString().padStart(2, '0')}</div>
											<div className="text-xs text-green-400 font-mono mt-1">LINKED ENTITIES</div>
										</div>
									</div>
									<div className="flex items-center justify-between pt-4 border-t border-blue-700">
										<div className="text-xs text-blue-200 font-mono">
											<span className="uppercase tracking-wide">Last Modified:</span> {board.lastModified}
										</div>
										<Button size="sm" className="bg-blue-600 hover:bg-blue-700 hover:bg-blue-800 text-white border-blue-500 font-mono text-xs shadow-lg cursor-pointer hover:shadow-xl transition-all duration-200">
											VIEW BOARD
										</Button>
									</div>
								</CardContent>
							</Card>
						))}
					</div>

					{/* Empty State */}
					{filteredBranches.length === 0 && (
						<div className="text-center py-16 bg-card border border-border rounded-xl">
							<FolderKanban className="h-16 w-16 text-muted-foreground mx-auto mb-4" />
							<h3 className="text-lg font-semibold font-mono mb-2">NO CASE BOARDS FOUND</h3>
							<p className="text-sm text-muted-foreground font-mono">
								No case boards match your current filters
							</p>
						</div>
					)}
				</TabsContent>

				{/* Timeline Tab */}
				<TabsContent value="timeline" className="space-y-6">
					{/* Search and Filter */}
					<div className="bg-card border border-border rounded-xl p-4">
						<div className="flex items-center gap-4">
							<div className="flex items-center gap-2 flex-1">
								<Search className="h-4 w-4 text-muted-foreground" />
								<Input
									placeholder="Search activities..."
									value={searchTerm}
									onChange={(e) => setSearchTerm(e.target.value)}
									className="font-mono"
								/>
							</div>
							<Button variant="outline" className="font-mono">
								<Filter className="h-4 w-4 mr-2" />
								FILTER
							</Button>
						</div>
					</div>

					{/* Activity Timeline */}
					<Card className="bg-card border-border">
						<CardHeader>
							<CardTitle className="flex items-center gap-2 font-mono">
								<Clock className="h-5 w-5" />
								ACTIVITY TIMELINE
							</CardTitle>
						</CardHeader>
						<CardContent>
							<div className="space-y-4 max-h-96 overflow-y-auto">
								{filteredLogs.length === 0 ? (
									<div className="text-center py-8 text-muted-foreground font-mono">
										No activities found
									</div>
								) : (
									filteredLogs.map(log => (
										<div key={log.id} className="flex items-start gap-4 p-3 rounded-lg bg-muted/30 border border-border/50">
											<div className="h-3 w-3 rounded-full bg-blue-500 mt-1"></div>
											<div className="flex-1">
												<div className="text-sm font-mono">{log.description}</div>
												<div className="flex items-center gap-3 mt-1">
													<div className="text-xs text-muted-foreground font-mono">
														{new Date(log.timestamp).toLocaleString()}
													</div>
													<div className="text-xs text-muted-foreground font-mono">
														by {log.user}
													</div>
												</div>
											</div>
										</div>
									))
								)}
							</div>
						</CardContent>
					</Card>
				</TabsContent>

				{/* Reports Tab */}
				<TabsContent value="reports" className="space-y-6">
					<div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
						<Card className="bg-card border-border cursor-pointer hover:shadow-xl hover:shadow-blue-500/10 transition-all duration-300 hover:scale-105 hover:border-blue-300">
							<CardContent className="p-6 text-center">
								<BarChart3 className="h-12 w-12 text-blue-500 hover:text-blue-600 mx-auto mb-4 transition-colors" />
								<h3 className="font-semibold font-mono mb-2 hover:text-blue-600 transition-colors">CASE STATISTICS</h3>
								<p className="text-sm text-muted-foreground font-mono mb-4">
									Detailed case analysis by branch
								</p>
								<Button
									onClick={() => generateReport("case-statistics")}
									disabled={generatingReport === "case-statistics"}
									className="font-mono hover:bg-blue-50 hover:border-blue-300 cursor-pointer transition-all duration-200"
								>
									{generatingReport === "case-statistics" ? (
										<>
											<RefreshCcw className="h-4 w-4 mr-2 animate-spin" />
											GENERATING...
										</>
									) : (
										<>
											<Download className="h-4 w-4 mr-2" />
											GENERATE
										</>
									)}
								</Button>
							</CardContent>
						</Card>

						<Card className="bg-card border-border cursor-pointer hover:shadow-xl hover:shadow-green-500/10 transition-all duration-300 hover:scale-105 hover:border-green-300">
							<CardContent className="p-6 text-center">
								<Activity className="h-12 w-12 text-green-500 hover:text-green-600 mx-auto mb-4 transition-colors" />
								<h3 className="font-semibold font-mono mb-2 hover:text-green-600 transition-colors">ACTIVITY REPORT</h3>
								<p className="text-sm text-muted-foreground font-mono mb-4">
									Officer activity and performance
								</p>
								<Button
									onClick={() => generateReport("activity-report")}
									disabled={generatingReport === "activity-report"}
									className="font-mono hover:bg-green-50 hover:border-green-300 cursor-pointer transition-all duration-200"
								>
									{generatingReport === "activity-report" ? (
										<>
											<RefreshCcw className="h-4 w-4 mr-2 animate-spin" />
											GENERATING...
										</>
									) : (
										<>
											<Download className="h-4 w-4 mr-2" />
											GENERATE
										</>
									)}
								</Button>
							</CardContent>
						</Card>

						<Card className="bg-card border-border cursor-pointer hover:shadow-xl hover:shadow-purple-500/10 transition-all duration-300 hover:scale-105 hover:border-purple-300">
							<CardContent className="p-6 text-center">
								<MapPin className="h-12 w-12 text-purple-500 hover:text-purple-600 mx-auto mb-4 transition-colors" />
								<h3 className="font-semibold font-mono mb-2 hover:text-purple-600 transition-colors">GEOLOCATION MAP</h3>
								<p className="text-sm text-muted-foreground font-mono mb-4">
									Case locations and hotspots
								</p>
								<Button
									onClick={() => generateReport("geolocation-map")}
									disabled={generatingReport === "geolocation-map"}
									className="font-mono hover:bg-purple-50 hover:border-purple-300 cursor-pointer transition-all duration-200"
								>
									{generatingReport === "geolocation-map" ? (
										<>
											<RefreshCcw className="h-4 w-4 mr-2 animate-spin" />
											GENERATING...
										</>
									) : (
										<>
											<MapPin className="h-4 w-4 mr-2" />
											VIEW MAP
										</>
									)}
								</Button>
							</CardContent>
						</Card>
					</div>
				</TabsContent>
			</Tabs>

			{/* Alerts Panel */}
			{stats.alerts > 0 && (
				<Card className="bg-card border-border border-l-4 border-l-red-500">
					<CardHeader>
						<CardTitle className="flex items-center gap-2 font-mono text-red-600">
							<Bell className="h-5 w-5" />
							ALERTS ({stats.alerts})
						</CardTitle>
					</CardHeader>
					<CardContent>
						<div className="space-y-2">
							<div className="flex items-center gap-3 p-3 rounded-lg bg-red-500/10 border border-red-500/20">
								<AlertTriangle className="h-4 w-4 text-red-500" />
								<div className="text-sm font-mono">High priority case requires HQ review</div>
								<div className="text-xs text-muted-foreground font-mono ml-auto">5 min ago</div>
							</div>
							<div className="flex items-center gap-3 p-3 rounded-lg bg-yellow-500/10 border border-yellow-500/20">
								<AlertTriangle className="h-4 w-4 text-yellow-500" />
								<div className="text-sm font-mono">Officer offline for extended period</div>
								<div className="text-xs text-muted-foreground font-mono ml-auto">12 min ago</div>
							</div>
						</div>
					</CardContent>
				</Card>
			)}
			</div>
		</div>
	);
}
